<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>神经网络与深度学习-note</title>
    <url>/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/</url>
    <content><![CDATA[<p><img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120081213727.png" alt="image-20210120081213727"></p>
<p>记录Michael Nielsen 的《神经网络与深度学习》学习过程。</p>
<a id="more"></a>



<h1 id="使用神经网络识别手写数字"><a href="#使用神经网络识别手写数字" class="headerlink" title="使用神经网络识别手写数字"></a>使用神经网络识别手写数字</h1><p>识别数字主要思想：获取大量的手写数字，常称作训练样本，然后开发出一个可以从这些训练样本中进行学习的系统。即神经网络使用样本来自动推断出识别手写数字的规则。</p>
<p>提高准确性：通过增加训练样本的数量，神经网络可以学到更多关于手写数字的知识。</p>
<h2 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h2><h3 id="感知器的定义"><a href="#感知器的定义" class="headerlink" title="感知器的定义"></a>感知器的定义</h3><ul>
<li>依据权重来做出决定的设备。</li>
<li>接收几个二进制输入，产生一个二进制输出</li>
</ul>
<p><img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120074657848.png" alt="image-20210120074657848"></p>
<ul>
<li><p>引入<strong>权重</strong>规则，用其表示相应输入对于输出的重要性。</p>
</li>
<li><p><strong>阈(yu)值</strong>是一个实数，一个神经元的参数。神经元的输出(0 or 1)由分配权重后的总和与阈值的大小关系决定。</p>
<p><img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120075501785.png"></p>
</li>
</ul>
<h3 id="简化感知器的数学描述"><a href="#简化感知器的数学描述" class="headerlink" title="简化感知器的数学描述"></a>简化感知器的数学描述</h3><ul>
<li><p>第一个变动是用w和x对应权重和输入的向量的点乘。</p>
</li>
<li><p>第二个变动用感知器的偏置b=-threshold代替。</p>
</li>
<li><p><strong>偏置</strong>：一种标识让感知器输出1(激活感知器)有多容易的估算。偏置非常大时输出1是很容易的，偏置非常小时输出1则很困难。</p>
<p><img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120092559889.png"></p>
</li>
</ul>
<h3 id="感知器网络"><a href="#感知器网络" class="headerlink" title="感知器网络"></a>感知器网络</h3><ul>
<li><p>第一层感知器——通过权衡输入依据做出三个简单决定。</p>
</li>
<li><p>第二层感知器——权衡第一层的决策结果并作出决定。以这种方式，二层感知器可以比一层感知器做出更复杂和抽象的决策。</p>
</li>
<li><p><strong>一个感知器只有一个输出</strong>，下图箭头仅仅便于说明一个一个感知器的输出被用于多个感知器。</p>
</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120093803752.png" alt="image-20210120093803752" style="zoom: 67%;">



<h3 id="感知器计算基本逻辑的功能"><a href="#感知器计算基本逻辑的功能" class="headerlink" title="感知器计算基本逻辑的功能"></a>感知器计算基本逻辑的功能</h3><ul>
<li><p>运算基础，例如“<strong>与</strong>”，“<strong>或</strong>”和“<strong>与非</strong></p>
</li>
<li><p>与非门感知器：输入00产生1，输入11产生0</p>
</li>
</ul>
<p><img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120103347029.png" alt="image-20210120103347029"></p>
<ul>
<li>与非门是通用运算，以此为基础我们可以用感知器网络来计算任何逻辑功能</li>
<li>构建一个电路将两个二进制数相加</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120115000598.png" alt="image-20210120115000598" style="zoom:80%;">

<ul>
<li>将与非门替换为感知器</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120115226182.png" alt="image-20210120115226182" style="zoom:67%;">

<ul>
<li>最左边感知器的输出被两次作为底部感知器的输入。进而我们可以简单把两条线合并为到一个权重为-4的连接</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120115424951.png" alt="image-20210120115424951" style="zoom: 67%;">

<ul>
<li><strong>输入层</strong>：将<code>x1</code> <code>x2</code>这样的感知器网路左边的浮动变量可以画一层额外的感知器来方便输入编码</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120115831884.png" alt="image-20210120115831884" style="zoom:67%;">

<ul>
<li>输入感知器：可以完全不将其看作感知器，而是简单的定义为输出期望值的特殊单元。</li>
</ul>
<h2 id="S型神经元"><a href="#S型神经元" class="headerlink" title="S型神经元"></a>S型神经元</h2><h3 id="学习算法"><a href="#学习算法" class="headerlink" title="学习算法"></a>学习算法</h3><p>自动调节人工神经元的权重和偏置</p>
<ul>
<li>学习过程：如果对权重(or 偏置)的微小的改动能够仅仅引起输出的微小变化，那么我们可以利用这一事实来修改权重和偏置，让我们的网络表现得像我们想要的那样。假设网络误将一个”9“识别为”8“。我们能够计算出对权重和偏置的微小改动，使网络将其正确识别。我们重复这个工作，反复修改权重和偏置来产生更好的输出。</li>
<li>问题：网络中单个感知器的权重或偏置的微小改动有时候会引起那个感知器的输出完全翻转，如0变到1。这样的翻转可能接下来引起其余网路的行为以极其复杂的方式完全改变。虽然”9“可能别正确分类，网络在其他图像上的行为很可能以一些很难控制的方式被完全改变。这使得逐步修改权重和偏置来让网络接近期望行为变得困难。</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120173437965.png" alt="image-20210120173437965" style="zoom:80%;">

<ul>
<li><p>解决方案：引入一种称为S型神经元的新的人工神经元来克服这个问题。S型神经元和感知器类似，但是被修改为权重和偏置的微小改动只引起输出的微小变化(这对于让神经元网络学习起来是很关键的)。</p>
</li>
<li><p><strong>S型神经元</strong>：有多个输入，这些输入可以取[0,1]中的任意值，而不仅仅是0和1。具有权重和偏置。但输出不是0或者1，而是<code>sigma(w·x+b)</code>,该函数为S型函数(逻辑函数)，定义为：</p>
</li>
</ul>
<p>  <img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120180707163.png" alt="image-20210120180707163"></p>
<p>  代入神经元参数为：</p>
<p>  <img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120180751519.png" alt="image-20210120180751519"></p>
<ul>
<li>S型神经元和感知器关系：当<code>z=w·x+b</code>取很大或者很小时其S型神经元的行为和感知器非常近似。只有<code>z</code>取中间值时与感知模型有较大的偏离。</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120181846815.png" alt="image-20210120181846815" style="zoom:67%;">

<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120182011643.png" alt="image-20210120182011643" style="zoom:67%;">

<ul>
<li>如果<code>sigma</code>函数是个阶跃函数，那么S型神经元将会成为一个感知器。之所以利用<code>sigma</code>函数是为了得到一个平滑的感知器。其<strong>平滑特性</strong>正是解决问题的关键因素，意味着权重和偏置的微小变化会从神经元产生一个微小的输出变化，利用微积分我们可以得到下式：</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120182810071.png" alt="image-20210120182810071" style="zoom:80%;">

<ul>
<li><p>理解:<code>Δoutput</code>是一个反应Δwj和Δb的线性函数，使得选择权重和偏置的微小变化来达到输出的微小变化的运算变得容易。因此，当S型神经元有更多和感知器相同的本质的行为时，计算如何变化权重和偏置来使输出变化会更加容易。</p>
</li>
<li><p>为什么选用上面的<code>sigma</code>函数：对于<code>sigma</code>函数重要的是形状而不是精确形式，选用该函数的目的是简化数学计算，因为指数在求导时有些可爱的属性。</p>
</li>
<li><p>S型神经元输出的解释：并非只输出0 or 1，但我们可以设定一个约定来解决这个问题，例如约定任何至少为0.5的输出表示为“这是某个数字”</p>
</li>
</ul>
<h2 id="神经网络的架构"><a href="#神经网络的架构" class="headerlink" title="神经网络的架构"></a>神经网络的架构</h2><p>假设我们有这样的网络：</p>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120194421991.png" alt="image-20210120194421991" style="zoom:80%;">

<ul>
<li><strong>输入层</strong>：网格中最左边的，其中的神经元为<strong>输入神经元</strong>。</li>
<li><strong>输出层</strong>：最右边的，有且只有一个<strong>输出神经元</strong>。</li>
<li><strong>隐藏层</strong>：中间包含既不输入也不输出的神经元的层。</li>
<li><strong>多层感知器</strong> or <strong>MLP</strong>：这种网络尽管是由S型神经元而不是感知器构成，但也称为多层感知器。</li>
</ul>
<p>设计输入输出层通常是比较直接的，隐藏层的设计则堪称一门艺术。特别是，通过一些简单的经验法则来总结隐藏层的设计流程是不可行的。相反，神经网络的研究人员已经为隐藏层开发了许多 设计最优法则。</p>
<ul>
<li><strong>前馈神经网络</strong>：以上一层的输出作为下一层的输入。这意味着网络中是没有回路 的——信息总是向前传播，从不反向反馈。</li>
<li>递归神经网络：反馈环路在其中是可行的，其设计思想是具有休眠前会在一段有限时间内保持激活状态的神经元。</li>
</ul>
<h2 id="一个简单的分类手写数字的网络"><a href="#一个简单的分类手写数字的网络" class="headerlink" title="一个简单的分类手写数字的网络"></a>一个简单的分类手写数字的网络</h2><img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210120194325646.png" alt="image-20210120194325646" style="zoom:80%;">

<ul>
<li>网络的输入层包含给输入像素的值进行编码的神经元 ，含有784=28*28个神经元。输入像素是灰度级的，值为1.0表示黑色，值为0.0表示白色，中间数值表示逐渐暗淡的灰色。</li>
<li>网络的隐藏层用n来表示神经元的数量。</li>
<li>网络的输出层包含10个神经元。如果第一个神经元激活，即其输出近似为1，那么表明 网络认为数字是一个0。更确切地说，我们把神经元的输出赋予编号0到9，并计算哪个神经元有最高的激活值。</li>
<li>思考：为什么使用10个输出神经元而不是4个。2^4=16&gt;10完全可以表示10个数字。</li>
<li></li>
</ul>
<h2 id="使用梯度下降算法进行学习"><a href="#使用梯度下降算法进行学习" class="headerlink" title="使用梯度下降算法进行学习"></a>使用梯度下降算法进行学习</h2><ul>
<li><p>训练数据集：用来学习的数据集。</p>
</li>
<li><p><strong>MNIST数据集</strong>：其中包含有数以万计的连带着正确分类器的手写数字的扫描图像。</p>
<p>我们将使用符号x来表示一个训练输入。为了方便，把每个训练输入x看作一个28*28=784维的向量。我们用y=y(x)表示对应的期望输出，这里的y是一个10维向量。例如有一个“6”的训练图像x，那么y(x) = (0,0,0,0,0,0,1,0,0,0)<sup>T</sup> 则是网络的期望输出。T是转置操作，把一个行向量转化成列向量。</p>
</li>
</ul>
<ul>
<li><strong>代价 函数</strong>：我们希望有一个算法，能够让我们找到权重和偏置，以至于网络的输出y(x) 能够拟合所有的训练输入x。为了量化我们如何实现这个目标，我们定义了代价函数：</li>
</ul>
<img src="/2021/01/19/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-note/image-20210121195359475.png" alt="image-20210121195359475" style="zoom:80%;">

<ul>
<li><p><code>w</code>：所有的网络中权重的集合；<code>b</code>：所有的偏置；<code>n</code>：训练输入数据的个数；<code>a</code>：当输入为 x 时输出的向量；符号<code>||v||</code>指的是向量v的模。</p>
</li>
<li><p>我们把C称为<strong>二次代价函数</strong> or <strong>均方误差</strong> or <strong>MSE</strong>。</p>
</li>
<li><p>该函数是非负的，其值相当小，C(w,b) $\approx$ 1 </p>
</li>
</ul>
<h1 id="反向传播算法如何工作"><a href="#反向传播算法如何工作" class="headerlink" title="反向传播算法如何工作"></a>反向传播算法如何工作</h1><h1 id="改进神经网络的学习方法"><a href="#改进神经网络的学习方法" class="headerlink" title="改进神经网络的学习方法"></a>改进神经网络的学习方法</h1><h1 id="神经网络可以计算任何函数的可视化证明"><a href="#神经网络可以计算任何函数的可视化证明" class="headerlink" title="神经网络可以计算任何函数的可视化证明"></a>神经网络可以计算任何函数的可视化证明</h1><h1 id="深度神经网络为何很难训练"><a href="#深度神经网络为何很难训练" class="headerlink" title="深度神经网络为何很难训练"></a>深度神经网络为何很难训练</h1><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1>]]></content>
      <categories>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2021/01/19/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="markdown-代码"><a href="#markdown-代码" class="headerlink" title="markdown 代码"></a>markdown 代码</h1><ul>
<li><strong>代码</strong> 使用**反引号`**效果如下：</li>
</ul>
<p><code>hello world</code></p>
<ul>
<li><strong>代码区块</strong>使用<strong>4个空格 or 制表符Tab</strong>，效果如下：</li>
</ul>
<ul>
<li><strong>代码区块</strong>还使用**```**包裹一段代码，实例如下：</li>
</ul>
<p>code:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">​<span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">$(document).ready(function () &#123;</span></span><br><span class="line"><span class="string">    alert(&#x27;RUNOOB&#x27;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">​`</span><span class="string">``</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>




<h1 id="markdown-段落"><a href="#markdown-段落" class="headerlink" title="markdown 段落"></a>markdown 段落</h1><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>在文本的两端加上两条波浪线即可**~~**,实例如下：</p>
<p><code>~~hello,world~~</code></p>
<p><del>hello,world</del></p>
<h2 id="角标"><a href="#角标" class="headerlink" title="角标"></a>角标</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H&lt;sub&gt;2&lt;&#x2F;sub&gt;O  CO&lt;sub&gt;2&lt;&#x2F;sub&gt;</span><br><span class="line">爆米&lt;sup&gt;TM&lt;&#x2F;sup&gt;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p>H<sub>2</sub>O  CO<sub>2</sub></p>
<p>爆米<sup>TM</sup></p>
<h1 id="markdown-特殊字符"><a href="#markdown-特殊字符" class="headerlink" title="markdown 特殊字符"></a>markdown 特殊字符</h1><h2 id="行内添加数学公式"><a href="#行内添加数学公式" class="headerlink" title="行内添加数学公式"></a>行内添加数学公式</h2><p>在文本行内添加数学公式需要开启<strong>内联公式</strong>。</p>
<p><code>文件-&gt;偏好设置-&gt;Markdown</code>中将内联公式勾选。</p>
<p><code>$\approx$</code>              $\approx$</p>
<h2 id="插入数学公式"><a href="#插入数学公式" class="headerlink" title="插入数学公式"></a>插入数学公式</h2><p>键入<code>$$</code> 后 <code>Enter</code> 即可。<br>$$</p>
<p>$$</p>
<h2 id="附录：Latex数学符号常用表"><a href="#附录：Latex数学符号常用表" class="headerlink" title="附录：Latex数学符号常用表"></a>附录：Latex数学符号常用表</h2><ul>
<li>上标 <br> <code>$a^2$</code>    -&gt;   $a^2$<br> <code>$a^&#123;222&#125;$</code>   -&gt;   $a^{222}$  </li>
<li>下标 <br> <code>$A_&#123;b_&#123;c&#125;&#125;$</code>   -&gt;   $A_{b_{C}}$ </li>
<li>前角标<br> <code>$&#123;^1_2&#125;A&#123;^3_4&#125;$</code>   -&gt;   ${^1_2}A{^3_4}$</li>
</ul>
<p><img src="/2021/01/19/markdown%E8%AF%AD%E6%B3%95/20190703164359871.png" alt="img"></p>
<p><img src="/2021/01/19/markdown%E8%AF%AD%E6%B3%95/20190703164424334.png" alt="6"></p>
<p><img src="/2021/01/19/markdown%E8%AF%AD%E6%B3%95/20190703164439850.png" alt="7-9"></p>
<p><img src="/2021/01/19/markdown%E8%AF%AD%E6%B3%95/20190703164500390.png" alt="10-13">    </p>
<h1 id="markdown-特殊操作"><a href="#markdown-特殊操作" class="headerlink" title="markdown 特殊操作"></a>markdown 特殊操作</h1><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p><code>&lt;br/</code>可以实现换行但与Enter效果不同</p>
]]></content>
  </entry>
  <entry>
    <title>hexo-next blog搭建及使用</title>
    <url>/2021/01/19/hexo-next-blog%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>hexo-next blog搭建过程及使用过程中的问题及解决方案</p>
<a id="more"></a>



<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="blog中插入图片"><a href="#blog中插入图片" class="headerlink" title="blog中插入图片"></a>blog中插入图片</h2><p>在配置文件中打开<strong>文章资源文件夹</strong></p>
<p><code>post_asset_folder: true</code></p>
<p>安装插件</p>
<p><code> npm install hexo-asset-image --save</code></p>
<p>打开文件<code>/node_modules/hexo-asset-image/index.js</code>将代码替换为下列代码</p>
<p>（在此感谢Ericam_ 大神：<a href="https://links.jianshu.com/go?to=https://blog.csdn.net/xjm850552586">https://blog.csdn.net/xjm850552586</a>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.<span class="built_in">test</span>(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.<span class="built_in">test</span>(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>


<p>Typora对于插入图片的支持做得非常好，在<code>文件-&gt;偏好设置-&gt;图像</code>中选择<code>复制到指定的路径</code> <code>./$&#123;filename&#125;</code> </p>
<p>使用该配置后，可以直接复制网页中的图片地址，粘贴到Typora中后，会直接复制该图片到文章资源文件夹，同时自动更改路径。</p>
<p>如复制网络路径的图片<code>https://...../image.jpg</code>粘贴到Typora中叫<code>文章名</code>的文章后，图片会自动变为<code>![](文章名/image.jpg)</code>。</p>
<p>但我们知道部署后，文件路径是不同的，所以当我们插入完所有的图片后，我们还需要删除每个图片路径中的<code>文件名/</code>。不慌，也很简单。</p>
<p>在Typora编辑器中，使用<code>&lt;C-f&gt;</code>快捷键，将所有的<code>文章名/</code>替换为空即可删除。</p>
<p><img src="/2021/01/19/hexo-next-blog%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/among-us-3840x2160-artwork-4k-23114-1611067673187.jpg" alt="among-us-3840x2160-artwork-4k-23114"></p>
]]></content>
  </entry>
  <entry>
    <title>python学习记录</title>
    <url>/2021/01/21/python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Python3-环境搭建"><a href="#Python3-环境搭建" class="headerlink" title="Python3 环境搭建"></a>Python3 环境搭建</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><h2 id="运行python"><a href="#运行python" class="headerlink" title="运行python"></a>运行python</h2><h1 id="Python基本语法"><a href="#Python基本语法" class="headerlink" title="Python基本语法"></a>Python基本语法</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul>
<li>字母或下划线(_)开头</li>
<li>字母下划线数字组成</li>
<li>对大小写敏感</li>
<li>在PYthon3中可以用中文作为变量名，非ASCII码也是允许的</li>
</ul>
<h2 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure>


<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li>单行注释以**#**开头</li>
</ul>
<ul>
<li>多行注释可以使用多个**#<strong>号，或者用</strong>```<strong>和</strong>“””**包裹</li>
</ul>
<h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>python最具特色的就是<strong>缩进来表示代码块，而不是使用大括号</strong><code>&#123;&#125;</code></p>
<p>所进的空格数是可变的，但是<strong>同一个代码块的语句必须包含相同的空格数</strong></p>
<h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>python通常是一行写完一条语句，但是如果语句过长我们可以<strong>使用反斜杠()来实现多行语句</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure>


<p><strong>在[],{},()中的多行语句不需要使用</strong></p>
<h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
<p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>
<p><strong>记住：</strong>空行也是程序代码的一部分。</p>
<h2 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h2><p>执行<code>input()</code>函数后等待用户键入，按下Enter后结束键入</p>
<h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><p>python可以在一行中使用多条语句，语句之间用<code>分号;</code>分割</p>
<h2 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h2><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>
<p>像<code>if``while``def``class</code>这样的复合语句，首行以关键字开始，以：号结束，改行之后的一行或者多行构成代码组。我们将首行及后面的代码组称为一个子句(clasuse)</p>
<h2 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h2><p><code>print</code>默认输出是换行的，如果实现不换行的输出需要在变量末尾加上<code>end=&quot;&quot;</code></p>
<h2 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h2><p>用<code>import</code>或者<code>from..import</code>来导入相应的模块</p>
<p>将整个模块(somemodule)导入：<code>import somemodule</code></p>
<p>从某个模块中导入某个函数：<code>from somemodule import somefunction</code></p>
<p>从某个模块中导入多个函数：<code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p>
<p>将某个模块中的全部函数导入：<code>from somemoudle import *</code></p>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>python可以使用<code>-h</code>参数查看各参数帮助信息</p>
<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><strong>python中的变量不需要声明，每个变量在使用前都必须赋值，变量被赋值后该变量才会被创建。</strong></p>
<p><strong>在python中，变量就是变量，没有类型，我们所说的“类型”是变量所指的内存中对象的类型。</strong></p>
<p><code>等号 =</code> :用来给变量赋值，其左边是一个变量名，右边是存储在变量中的值。</p>
<h2 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h2><p>Python允许同时为多个变量赋值：</p>
<ul>
<li><code>a = b = c = 1</code>，创建一个整型对象，值为1，三个变量被赋予相同的数值。</li>
<li><code>a, b, c = 1, 2, &quot;hello&quot;</code>，两个整型对象1和2分配给a和b，字符串对象“hello”分配给变量c。</li>
</ul>
<h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><ul>
<li>Number（数字）</li>
<li>String（字符串）</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<p><strong>不可变数据</strong>：Number，String，Tuple；</p>
<p><strong>可变数据</strong>：List，Dictionary，Set。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
